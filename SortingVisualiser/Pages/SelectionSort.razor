@page "/selection-sort"
<PageTitle>Selection Sort</PageTitle>

<h1>Selection Sort</h1>

<div class="array-container">
    @for (var i = 0; i < @array.Length; i++)
    {
        <div class="array-bar"
            style=@($"height: {@array[i]}px; {StyleForNumber(i)}; width: 10px;")>
        </div>
    }
</div>

<button type="button" class="btn btn-light" disabled=@btnIsDisabled @onclick="Generate">Generate new array</button>
<button type="button" class="btn btn-primary" disabled=@btnIsDisabled @onclick="Sort">Sort</button>

@code {
    private int hlLeft = -1;
    private int hlRight = -1;

    private bool btnIsDisabled = false;
    private int[] array = ArrayGenerator.Generate(80);

    private string StyleForNumber(int n)
    {
        if (n == hlLeft) return "background-color: #D02EE6";
        if (n == hlRight) return "background-color: #D02EE6";
        return "background-color: #E6DC39";
    }

    private void Generate()
    {
        array = ArrayGenerator.Generate(80);
    }

    private async Task Sort()
    {
        btnIsDisabled = true;
        await SelectionSortFunc(array);
        btnIsDisabled = false;
    }

    private async Task SelectionSortFunc(int[] arr)
    {

        int temp, smallest;
        for (int i = 0; i < arr.Length - 1; i++)
        {
            smallest = i;
            for (int j = i + 1; j < arr.Length; j++)
            {
                if (arr[j] < arr[smallest])
                {
                    smallest = j;
                }
            }
            hlLeft = smallest;
            hlRight = i;
            temp = arr[smallest];
            arr[smallest] = arr[i];
            arr[i] = temp;
            StateHasChanged();
            await Task.Delay(20);
        }
        hlLeft = -1;
        hlRight = -1;
    }
}

