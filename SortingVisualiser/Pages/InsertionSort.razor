@page "/insertion-sort"
<PageTitle>Insertion Sort</PageTitle>

<h1>Insertion Sort</h1>

<div class="array-container">
    @for (var i = 0; i < @array.Length; i++)
    {
        <div class="array-bar"
            style=@($"height: {@array[i]}px; {StyleForNumber(i)}; width: 10px;")>
        </div>
    }
</div>

<button type="button" class="btn btn-light" disabled=@btnIsDisabled @onclick="Generate">Generate new array</button>
<button type="button" class="btn btn-primary" disabled=@btnIsDisabled @onclick="Sort">Sort</button>

@code {
    private int hlLeft = -1;
    private int hlRight = -1;

    private bool btnIsDisabled = false;
    private int[] array = ArrayGenerator.Generate(50);

    private string StyleForNumber(int n)
    {
        if (n == hlLeft) return "background-color: red";
        if (n == hlRight) return "background-color: red";
        return "background-color: pink";
    }

    private void Generate()
    {
        array = ArrayGenerator.Generate(50);
    }

    private async Task Sort()
    {
        btnIsDisabled = true;
        await InsertionSortFunc(array);
        btnIsDisabled = false;
    }

    private async Task InsertionSortFunc(int[] arr)
    {
        for (int i = 0; i < arr.Length - 1; i++)
        {
            for (int j = i + 1; j > 0; j--)
            {
                if (arr[j - 1] > arr[j])
                {
                    hlLeft = j;
                    hlRight = j - 1;
                    int temp = arr[j - 1];
                    arr[j - 1] = arr[j];
                    arr[j] = temp;
                    StateHasChanged();
                    await Task.Delay(20);
                }
            }
        }

        hlLeft = -1;
        hlRight = -1;
    }
}

